#include <numeric> // iota
#include <type_traits> // is_same
#include <vector>

#include "catch2/catch.hpp"

#include "Mechanics/ForceField/Volume/CylinderExclVolRepulsion.h"
#include "Mechanics/ForceField/Volume/CylinderVolumeMon.hpp"
#include "TESTS/Mechanics/ForceField/TestFFCommon.hpp"

using namespace medyan::test_ff_common;

TEST_CASE("Force field: Cylinder excl volume scaling", "[ForceField]") {
    // The test case checks the scaling behavior of volume exclusion interaction

    using namespace std;
    using namespace medyan;

    const std::vector<floatingpoint> coord {
        // Segments of cylinder 1
        -60.0, 0.0, 0.0,
        0.0,   0.0, 0.0,
        60.0,  0.0, 0.0,

        // Segments of cylinder 2
        -40.0, -40.0, 10.0,
        -28.0, -24.0, 10.0,
        -10.0, 0.0,   10.0,
        20.0,  40.0,  10.0,
    };

    // Configuration 0
    const std::vector<int>           beadSet0  { 0, 6, 9, 18 };
    const std::vector<floatingpoint> k0        { 1e-2 };
    const std::vector<floatingpoint> eqLength0 { 100.0, 100.0 };

    // Configuration 1: breaking down each cylinder into several segments
    const std::vector<int>           beadSet1  { 0, 3, 9, 12,  0, 3, 12, 15,  0, 3, 15, 18,  3, 6, 9, 12,  3, 6, 12, 15,  3, 6, 15, 18, };
    const std::vector<floatingpoint> k1        { 1e-2,         1e-2,          1e-2,          1e-2,         1e-2,          1e-2,         };
    const std::vector<floatingpoint> eqLength1 { 50.0, 20.0,   50.0, 30.0,    50.0, 50.0,    50.0, 20.0,   50.0, 30.0,    50.0, 50.0,   };

    auto tempCoord = coord;
    const auto energy0 = CylinderExclVolRepulsion{}.energy(tempCoord.data(), beadSet0.data(), k0.data(), eqLength0.data(), k0.size());
    const auto energy1 = CylinderExclVolRepulsion{}.energy(tempCoord.data(), beadSet1.data(), k1.data(), eqLength1.data(), k1.size());

    REQUIRE(energy0 == Approx(energy1));
}

TEST_CASE("Force field: Cylinder excl volume consistency", "[ForceField]") {
    // The test case checks whether integrated volume exclusion formula is consistent with the monomer-based formula.

    using namespace std;
    using namespace medyan;

    const std::vector<floatingpoint> coord {
        10, 0, 0,
        -10, 0, 0,

        0, 10, 5,
        0, -10, 5,
    };
    const floatingpoint eqLen = 20.0;
    const floatingpoint kvol = 0.25;

    // Compute energy using integral formula.
    const std::vector<int>           beadSet { 0, 3, 6, 9 };
    const std::vector<floatingpoint> eqLens { eqLen, eqLen };
    auto tempCoord = coord;
    const auto energyIntegral = CylinderExclVolRepulsion{}.energy(tempCoord.data(), beadSet.data(), &kvol, eqLens.data(), 1);

    // Compute energy using monomer-based formula.
    // Using 40 monomers on each cylinder.
    const Size numMon = 40;
    CylinderVolumeEachInteractionInfo iinfo {
        // Cylinder 1.
        {
            // coord index.
            0, 3,
            // monomer index range.
            0, numMon,
            // monomer interval and equilibrium length.
            1, eqLen / numMon,
        },
        // Cylinder 2.
        {
            // coord index.
            6, 9,
            // monomer index range.
            -9, -9 + numMon,
            // monomer interval and equilibrium length.
            4, eqLen / numMon,
        },
        // kvol.
        kvol,
    };
    const auto energyMonomer = energy(iinfo, coord.data());

    INFO("integral_energy=" << energyIntegral << ", monomer_based_energy=" << energyMonomer);
    CHECK(test_ff_common::equalRelEps(energyIntegral, energyMonomer, 1e-2));
}


TEST_CASE("Force field: Cylinder excl volume", "[ForceField]") {
    // The test case checks whether energy and force are consistent

    using namespace std;
    using namespace medyan;
    using VF = std::vector< floatingpoint >;

    // Prepare data
    //---------------------------------
    struct TestInput {
        std::string      name;
        std::vector<int> beadSet;
        VF               k;
        VF               eqLength;
        VF               coord;
    };


    // Multiple test sets
    std::vector< TestInput > testInputs;

    // Input: standard symmetric case
    testInputs.push_back({
        "standard-symmetric",
        // bead set
        { 0, 3, 6, 9 },
        // k
        { 0.25 },
        // equilibrium length
        { 20.0, 20.0 },
        // coordinates
        {
            10, 0, 0,
            -10, 0, 0,

            0, 10, 5,
            0, -10, 5,
        },
    });

    // Input: general cases
    testInputs.push_back({
        "general",
        // bead set
        { 0, 3, 6, 9,  0, 3, 12, 15 },
        // k
        { 100.0, 2e3 },
        // equilibrium length
        { 20.0, 20.0,  20.0, 100.0 },
        // coordinates
        {
            10, 0, 0,
            -10, 0, 0,

            0, 10, 5,
            3, -10, 5,

            3, 70, 30,
            2, -20, 0,
        },
    });


    // Input: the following input would result in failure due to large numerical instability near co-planar case.
    // Add the following input to test suite if this instability is fixed.
    if(false) {

        // The following data is the point of failure of a certain simulation on Sep 1, 2021.
        const int           nint20210901 = 197;
        const int           beadSet20210901[]  {36,39,12,15,9,63,18,21,66,18,6,9,66,18,9,63,39,81,12,15,21,87,9,63,15,99,36,39,15,99,93,36,111,12,39,81,63,129,18,21,63,129,21,87,81,138,111,12,99,141,93,36,120,150,81,138,120,150,111,12,138,162,75,120,138,162,120,150,150,180,81,138,150,180,39,81,150,180,111,12,162,183,33,75,162,183,75,120,156,186,6,9,156,186,66,18,156,186,96,6,168,192,33,75,168,192,30,33,183,195,42,45,186,201,6,9,186,201,9,63,186,201,18,21,180,204,39,81,192,210,33,75,192,210,162,183,192,210,30,33,210,228,195,213,210,228,183,195,210,228,162,183,228,237,195,213,228,237,183,195,264,111,81,138,264,111,138,162,264,111,120,150,264,111,150,180,204,309,36,39,318,114,198,222,318,114,222,270,321,93,99,141,321,93,141,165,315,333,96,6,333,339,6,9,378,321,141,165,378,321,165,207,396,264,138,162,396,264,120,150,372,402,297,327,405,318,222,270,405,318,270,324,327,423,372,402,324,426,15,99,324,426,99,141,324,426,369,387,324,426,93,36,429,381,219,261,429,381,201,219,399,435,258,342,438,357,207,246,438,357,246,273,387,441,324,426,387,441,270,324,435,447,258,342,453,405,222,270,453,405,270,324,453,405,387,441,393,456,297,327,393,456,327,423,393,456,372,402,459,354,411,291,465,429,219,261,465,429,201,219,342,468,399,435,342,468,435,447,447,471,243,258,447,471,258,342,477,378,165,207,477,378,207,246,480,432,228,237,480,432,237,276,480,432,276,330,483,411,459,354,468,489,336,399,468,489,399,435,495,498,306,417,402,501,297,327,402,501,384,393,402,501,327,423,402,501,393,456,507,453,324,426,507,453,270,324,507,453,369,387,507,453,387,441,498,510,417,486,498,510,306,417,423,513,393,456,510,519,486,516,510,519,417,486,456,522,363,372,456,522,297,327,456,522,327,423,456,522,372,402,519,525,486,516,519,525,348,450,441,528,405,318,441,528,222,270,441,528,270,324,441,528,453,405,516,534,348,450,516,534,519,525,426,537,36,39,426,537,309,369,426,537,15,99,426,537,321,93,426,537,99,141,426,537,93,36,666,543,177,294,522,546,351,363,522,546,363,372,450,549,519,525,450,549,516,534,546,555,303,351,546,555,351,363,555,561,252,303,555,561,303,351,501,567,366,384,501,567,384,393,471,570,231,243,471,570,243,258,528,576,318,114,528,576,405,318,528,576,222,270,579,474,255,282,561,582,252,303,537,585,36,39,537,585,93,36,588,591,354,249,588,591,459,354,594,480,237,276,594,480,276,330,582,597,234,252,525,603,348,450,525,603,516,534,525,603,450,549,534,606,348,450,534,606,519,525,534,606,450,549,534,606,525,603,534,606,549,654,534,606,642,663,534,606,663,672,567,612,366,384,567,612,345,366,591,618,354,249,591,618,411,291,591,618,459,354,591,618,291,96,570,630,216,231,570,630,231,243,621,633,330,348,621,633,276,330,612,636,339,345,612,636,345,366,633,642,330,348,633,642,276,330,633,642,348,450,549,654,519,525,549,654,516,534,636,657,66,18,636,657,249,66,636,657,333,339,636,657,339,345,642,663,330,348,642,663,348,450,642,663,450,549,642,663,525,603,645,666,177,294,657,669,249,66,657,669,333,339,657,669,354,249,663,672,348,450,663,672,519,525,663,672,516,534,663,672,450,549,663,672,525,603,543,675,294,336,543,675,489,495,543,675,495,498,543,675,306,417,};
        const floatingpoint eqLength20210901[] {};
        const floatingpoint coord20210901[]    {766.7981238,610.4676853,877.0689199,800.660754,513.5593349,843.5535768,788.4602107,147.2603651,616.2998117,796.7678055,206.3121371,526.2384602,119.5844107,783.6331192,594.0385484,121.7576285,829.668812,691.6881412,836.4949183,200.8717335,526.5850646,775.4359688,269.1926178,468.979031,497.2246476,478.9153417,254.4634596,515.9804688,577.115009,213.6096531,395.4582364,397.4047419,461.0556238,326.606811,480.3206259,454.1351299,143.7094798,886.0301722,722.2805525,111.1056138,840.4285515,629.9765452,214.437989,330.4422202,358.1499094,174.4515437,372.0408782,449.4517802,67.23470937,435.3227489,895.7511557,102.3486911,339.4073416,860.681791,420.9478462,655.1795379,499.7111431,413.8614711,743.9349705,438.5948738,156.3173665,254.0986261,822.3094888,789.9753205,265.8570143,436.0400984,903.2546267,157.214495,599.7080101,424.7804492,825.839931,369.0612621,139.1513049,407.9993471,544.9828115,257.5145322,563.148577,448.7577422,520.3158535,676.2587641,170.9957711,112.8469516,771.2467758,547.0700667,817.4875405,417.019969,798.1918101,714.3517386,351.5971028,435.2539837,466.6953228,316.238513,461.9670936,203.3245337,917.6147247,806.6091216,801.4750533,101.4365806,713.2394844,155.2124192,874.1373474,784.2202063,261.9390827,281.465957,274.4209849,718.0771555,703.5841742,901.9154572,471.0437429,380.3750176,290.0711402,126.7781428,736.1068707,497.3464529,49.31598562,538.825792,920.8231093,501.2069081,774.5591645,130.5507496,192.1001661,649.0697161,449.9713418,228.4968629,181.9707523,786.9498619,634.2420194,423.6159018,427.5388151,809.8604395,336.4578715,356.7105904,107.4336354,444.1651915,641.6851208,816.6993398,326.7953982,738.8691614,147.1650851,688.8596932,486.2935784,225.4548748,903.2110868,860.8991364,439.706645,562.7034709,552.2418255,541.1896111,477.9703048,434.8366761,140.3928176,743.1122354,462.095875,315.7524841,124.999068,758.6069638,801.9550879,250.7578201,663.6314178,872.6748721,413.5803779,314.7284821,178.3667138,594.6762776,443.6863656,319.879868,918.6250378,910.957175,437.1274457,505.7807935,442.7556085,80.20621427,490.0622713,735.5848049,413.383153,83.8584732,737.668723,459.8443041,894.5830245,293.5171222,98.38210961,835.3503874,499.3969929,182.9159482,495.8388399,400.4306386,779.7156998,194.235342,574.3566558,920.8568822,494.5962331,262.134391,329.5787911,503.5375233,433.2997146,161.3964778,414.7189124,332.4945534,60.25735792,554.2431919,820.1273614,735.9339852,145.0242749,488.7801915,65.7288733,910.7646748,569.4672981,423.2080134,934.2675564,938.1365192,232.2143539,483.9949952,390.9021591,145.8956626,370.8450437,235.0563916,952.3632442,571.1915599,192.8926605,698.82881,104.3481863,395.8676283,52.28947938,641.4021103,883.403398,170.3619397,360.1763297,130.431003,161.5347476,465.7762047,311.33253,958.7388296,652.2774841,121.9163218,250.1253437,365.4962738,57.85371984,123.0109439,471.2657419,210.6171044,657.8669204,790.9964359,921.8141652,935.6824927,751.143203,85.14762202,528.6137786,953.2283961,951.9456699,938.7058932,131.2697527,698.3201785,357.0815004,362.1905327,43.43909112,516.8352174,58.01394576,720.5662173,888.7868588,847.293001,70.27719656,686.1720715,72.03274775,293.6052314,132.5200944,683.3870296,403.2631387,464.9308368,467.6226704,596.814815,61.58854938,745.9672476,908.7614853,636.16966,961.231236,957.2601226,116.8633015,519.045276,113.9800086,320.0159275,228.4082407,200.4088645,622.327542,46.85353455,700.3293532,442.1860003,280.7795285,320.2644517,743.7953661,952.4654123,956.7260502,837.5318374,70.3135933,810.1674126,521.6935364,941.728615,218.5949172,711.6296639,63.64505514,189.0024791,843.0839139,910.4614066,950.618511,458.0361479,327.0925657,58.75441364,449.784644,862.6791356,95.14158993,45.89727088,950.2630746,668.0033781,541.8686081,239.3007331,452.3141392,725.3002182,49.65219995,667.9052374,44.99121214,646.2180118,931.3469314,280.3197625,941.1504349,878.5845967,91.10729402,845.9917533,880.7366774,777.219132,88.96554952,107.0485968,129.2795124,607.7679735,53.70766266,818.4314139,62.99395358,614.8871316,605.556997,961.6634323,153.5521142,892.4273333,76.56797438,537.4112264,814.0717275,923.3468309,53.12734209,938.1311824,77.03274151,439.5700984,122.5557263,714.3912359,37.96980902,536.4809226,253.0706186,65.50419308,954.0018633,91.24035127,797.3632473,590.231492,873.2575713,939.7290547,492.9251791,370.4254437,634.6639704,622.9721364,188.2934527,64.0156012,949.2157419,61.60449174,333.2642054,42.57388706,939.7379195,775.4307887,715.5653625,133.27524,72.63561859,388.5239167,175.8253714,135.5395488,367.8935993,958.1249731,939.4555849,619.3364873,166.580888,432.9633529,924.404413,54.65802734,228.397394,56.25423654,882.2912079,865.8479582,411.8921748,179.6371752,343.002127,872.8094965,82.90370903,137.8450916,137.2515125,625.7028304,312.0825319,700.9249752,957.6308845,103.0569386,806.6213671,84.11663632,103.6387252,49.4217995,754.0370065,927.1017534,916.4911841,832.2112184,938.4609937,891.8296132,50.67155871,901.4336565,521.5776087,271.684539,667.7244038,363.6027504,921.4316635,67.15528229,450.9829995,107.4470456,79.98414029,863.7864427,133.5858757,60.40823546,132.6828066,915.222179,809.0340536,697.6829812,96.90472467,407.0520789,141.1998195,564.1366863,223.4390486,796.4667758,924.1561946,65.47827624,519.4183149,952.9005237,957.2072777,83.3520852,795.4397164,924.0342517,381.8770611,77.86158792,363.1431585,884.1534758,867.1052699,38.72743786,96.86302025,819.1527618,43.50476777,56.96003534,861.1600745,915.6222826,796.4714824,121.4263819,71.91788016,959.5964035,47.89024246,884.1213255,492.4774565,55.63912142,43.80104219,763.5457806,42.39322032,381.9612502,711.1247588,954.5710503,43.67110576,943.9153496,777.1976471,38.55019427,550.1360097,172.1332222,698.3472904,407.2680192,962.4081642,962.6461595,144.8906312,500.5618193,136.2136131,928.2359248,41.60147202,954.2690827,257.2076819,928.2475022,49.87402752,603.2516214,959.3764388,45.36992711,374.3964761,52.40095887,368.1257384,495.828905,955.1722343,55.57998779,389.0407457,946.4924834,69.09610797,893.9119243,69.79642389,165.6074357,953.1631093,731.9260791,922.4076762,62.72329157,933.286666,906.7370816,282.2844898,934.8090663,80.2831963,954.7835249,181.5489302,37.89698988,152.5877389,901.5479113,47.14736324,179.0431835,903.9163833,73.59207147,700.5246138,157.8133683,38.36315391,90.91290969,844.5993376,54.30751637,116.3389635,696.4851376,952.0195426,367.0956463,41.77264382,940.381253,50.64489208,865.9245096,45.68877193,176.4125317,949.1535553,716.2992236,960.9284575,625.6240706,905.1019546,462.2773974,949.1006542,135.9977848,606.5163528,210.8085319,35.70116653,62.30863759,920.2751134,59.18033688,958.6153117,519.1221072,887.445535,528.2053492,280.8903085,60.380914,953.4908714,412.8476038,869.0380205,480.1727131,354.1086236,123.4505452,953.6258776,351.3294508,60.9598209,937.3199708,87.12632239,262.9644482,961.9530016,672.2258234,56.18149119,947.2007619,306.9078559,849.1342865,151.2789013,594.5423326,959.1196841,557.97967,144.7266228,706.6812969,405.6446462,432.0741103,121.6208917,218.9736569,958.6457506,617.494923,939.6414169,201.4310857,827.3135792,930.1945525,96.90038742,801.9657869,145.3616466,491.04532,123.1120527,323.2128623,471.4766776,64.20952601,186.8221815,492.5676204,957.9141751,35.81580973,794.8296332,40.1638247,48.09440178,865.0276798,45.65326224,261.9599644,957.9405386,518.4208351,940.9258727,105.039951,369.3984924,223.3395319,390.9846497,954.6029123,924.7101565,34.79802933,784.3675842,243.9516138,543.8109968,51.72868216,307.7279107,954.8799713,420.646029,261.6154504,290.0682503,950.8113632,960.2270109,566.1147215,76.00296099,173.2629425,625.4853099,53.48919166,931.9962218,121.9493753,475.6835489,302.3222823,190.1171132,946.7828325,110.9909573,713.7317329,54.79483434,357.0088444,952.1189447,324.5848657,955.6115863,458.2393728,76.18458952,953.4288249,340.6420307,59.42993599,46.95253862,962.9412433,66.28165981,933.3831842,122.8042596,583.6646474,345.346911,91.15108018,942.5310463,49.17769646,802.0942848,48.91170604,408.9956252,950.2937903,229.9382505,945.3471786,113.034018,690.5505818,46.08289753,806.5145689,48.61593755,466.2684708,949.0114262,128.9617958,};

        int badi = 68;
        testInputs.push_back({
            "almost-coplanar-unstable",
            // bead set
            { beadSet20210901[badi * 4], beadSet20210901[badi * 4 + 1], beadSet20210901[badi * 4 + 2], beadSet20210901[badi * 4 + 3] },
            // k
            { 100.0 },
            // equilibrium length
            { eqLength20210901[badi * 2], eqLength20210901[badi * 2 + 1] },
            // coordinates
            vector<floatingpoint>(begin(coord20210901), end(coord20210901)),
        });
    }


    // Prepare test parameters
    //---------------------------------
    const floatingpoint moveMag      = std::is_same< floatingpoint, float >::value ? 5e-3 : 1e-5;

    const floatingpoint diffDeRelEps = std::is_same< floatingpoint, float >::value ? 6e-2 : 5e-4;

    const size_t repsTot     = 10;
    const size_t repsPassReq = 9;


    // Run tests for each set of input
    //---------------------------------
    for(auto& ti : testInputs) {

        // Prepare functions
        //---------------------------------
        const auto calcEnergy = [&](const VF& c) {
            auto tempC = c;
            auto ret = CylinderExclVolRepulsion{}.energy(
                tempC.data(),
                ti.beadSet.data(),
                ti.k.data(),
                ti.eqLength.data(),
                ti.k.size()
            );
            return ret;
        };
        const auto calcForce = [&](const VF& c, VF& f) {
            auto tempC = c;
            CylinderExclVolRepulsion{}.forces(
                tempC.data(),
                f.data(),
                ti.beadSet.data(),
                ti.k.data(),
                ti.eqLength.data(),
                ti.k.size()
            );
        };


        // Run the test
        //---------------------------------
        size_t repsPass = 0;
        for(size_t rep = 1; rep <= repsTot; ++rep) {
            const auto res = testEnergyForceConsistency(ti.coord, calcEnergy, calcForce, moveMag, diffDeRelEps);
            if(res.passed)
                ++repsPass;
            else
                WARN(ti.name << " (Rep " << rep << '/' << repsTot << " fail) E: " << calcEnergy(ti.coord) << " Actual de: " << res.deActual << " Expected de: " << res.deExpected);
        }
        CHECK(repsPass >= repsPassReq);
    }
}

